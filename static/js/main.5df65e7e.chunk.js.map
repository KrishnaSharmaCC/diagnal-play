{"version":3,"sources":["components/searchBox/searchBox.jsx","components/header/header.jsx","containers/layout/layout.jsx","components/card/card.jsx","containers/listingPage/listingPage.jsx","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","value","onChange","onGoBack","searchFocused","useState","searchInput","useRef","useEffect","console","log","toggleInput","el","state","ee","current","classList","add","focus","remove","className","onMouseLeave","trim","length","id","name","type","autoComplete","placeholder","e","target","ref","src","alt","width","height","onClick","Header","props","logoRef","elem","document","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","logoEl","logo","toggleLogo","Layout","children","Card","imgUrl","ListingPage","Array","fill","map","item","i","key","initialState","logCount","rootReducer","combineReducers","reducer1","data","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5df65e7e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './searchBox.scss';\n\nconst SearchBox = ({ value, onChange, onGoBack, searchFocused }) => {\n  const [searchKey, setSearchKey] = useState('');\n  const searchInput = useRef(null);\n  useEffect(() => {\n    console.log('rendering');\n  });\n  const toggleInput = (el, state) => {\n    const ee = el?.current;\n    // console.log(ee);\n    if (ee?.classList) {\n      if (state) {\n        ee.classList.add('show');\n        ee.focus(); // Focus input\n        searchFocused(true);\n      } else {\n        ee.classList.remove('show');\n        searchFocused(false);\n      }\n    }\n  };\n  const clearSearch = (el) => {\n    const ee = el?.current;\n    ee.value = '';\n    onChange('');\n    searchFocused(false);\n  }\n  return (\n    <div\n      className=\"search\"\n      onMouseLeave={() =>\n      {\n        // Do not trigger render.. use ref instead\n        !searchInput?.current?.value?.trim()?.length && toggleInput(searchInput, false)\n      }\n      }\n    >\n      <div id=\"wrap\">\n        <input\n          id=\"search\"\n          name=\"search\"\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"What're you looking for?\"\n          className=\"searchInput\"\n          onChange={(e) => onChange(e.target.value)}\n          ref={searchInput}\n        />\n        <span className=\"backArrow\"><img src=\"assets/back-arrow.svg\" alt=\"go-back\" width=\"30\" height=\"30\" onClick={() => (toggleInput(searchInput, false),clearSearch(searchInput),onGoBack && onGoBack())}/></span>\n        <img\n          className=\"search\"\n          src=\"assets/searchIcon.svg\"\n          alt=\"Search-icon\"\n          onClick={() => toggleInput(searchInput, true)}\n        />\n      </div>\n    </div>\n  );\n};\nexport default SearchBox;\n","import React, { useRef } from 'react';\nimport SearchBox from '../searchBox/searchBox';\nimport './header.scss';\n/* View in fullscreen */\nfunction openFullscreen(elem) {\n  if (elem.requestFullscreen) {\n    elem.requestFullscreen();\n  } else if (elem.mozRequestFullScreen) { /* Firefox */\n    elem.mozRequestFullScreen();\n  } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n    elem.webkitRequestFullscreen();\n  } else if (elem.msRequestFullscreen) { /* IE/Edge */\n    elem.msRequestFullscreen();\n  }\n}\n\n/* Close fullscreen */\nfunction closeFullscreen(elem) {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) { /* Firefox */\n    document.mozCancelFullScreen();\n  } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n    document.webkitExitFullscreen();\n  } else if (document.msExitFullscreen) { /* IE/Edge */\n    document.msExitFullscreen();\n  }\n}\n\nconst Header = (props) => {\n  const logoRef = useRef(null);\n  const toggleLogo = (logoEl, state) => {\n    const logo = logoEl?.current;\n    if (logo?.classList) {\n      if (state) {\n        logo.classList.add('hide');\n        return;\n      }\n      logo.classList.remove('hide');\n    }\n  };\n  return (\n    <div className=\"header\">\n      <div className=\"header-items\">\n        <img\n          className=\"logo\"\n          src=\"assets/play1.svg\"\n          alt=\"\"\n          height=\"auto\"\n          ref={logoRef}\n          onClick={() => \n            openFullscreen(document.documentElement)    \n          }\n        />\n        <SearchBox\n          value={props.value}\n          onChange={props.onChange}\n          onGoBack={null}\n          searchFocused={(state) => toggleLogo(logoRef, state)}\n        />\n      </div>\n    </div>\n  );\n};\nexport default Header;\n","import React from 'react';\nimport Header from '../../components/header/header';\nimport './layout.scss';\nconst Layout = (props) => {\n  return (\n  <div className=\"layout\">\n      <Header onChange={(e) => console.log(e)}/>\n      <div className=\"layout-wrapper\">{props.children}</div>\n    </div>\n  );\n};\nexport default Layout;\n","import React from 'react';\nimport './card.scss';\nconst Card = ({imgUrl, name}) => {\n  return (\n    <div className=\"playCard\">\n      <div className=\"playCardImageContainer\">\n        <img src={imgUrl} alt={name} className=\"playCardImage\" />\n      </div>\n      <p className=\"playCardName\">{name}</p>\n    </div>\n  )\n}\nexport default Card;","import React from 'react';\nimport Card from '../../components/card/card';\nimport './listingPage.scss';\nconst ListingPage = (props) => {\n  const items = [\n  {imgUrl: 'picsum.photos/200/300', name: 'Movie-'}\n]\n  return (\n    <div className=\"listingPage\">\n      <div className=\"listings\">\n        {new Array(20).fill('').map((item, i) => <Card imgUrl={`http://picsum.photos/200/300?p=${i}`} name={`Movie-${i + 1}`} key={i}/>)}\n      </div>\n    </div>\n  )\n}\nexport default ListingPage;","import { combineReducers, createStore } from 'redux';\n\nconst initialState = { logCount: 1 };\nconst reducer1 = (state = initialState, {type, data}) => {\n  switch (type) {\n    case 'LOG':\n      return {...state, logCount: state.logCount + 1}\n  \n    default:\n      return state;\n  }\n}\nconst rootReducer = combineReducers({ reducer1 })\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Layout from './containers/layout/layout';\nimport ListingPage from './containers/listingPage/listingPage';\nimport store from './redux/store';\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n          <h1>Initial store setup done</h1> */}\n        <Layout> \n          {/* <Sample /> */}\n          <ListingPage />\n          </Layout>\n        {/* </header> */}\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}