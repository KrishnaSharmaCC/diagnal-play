{"version":3,"sources":["constants.js","redux/actions.js","components/searchBox/searchBox.jsx","components/header/header.jsx","hooks/useDebounceCallback.jsx","containers/layout/layout.jsx","components/card/card.jsx","utils/fetchUtil.js","containers/listingPage/listingPage.jsx","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["ASSETS_PREFIX","process","FALLBACK_IMAGE","API_ENDPOINT","ACTIONS","SearchBox","value","onChange","searchFocused","searchInput","useRef","toggleInput","el","state","ee","current","classList","add","focus","remove","useEffect","setSearchKeyFromProps","className","onMouseLeave","trim","length","id","name","type","autoComplete","placeholder","e","target","ref","src","alt","onClick","Header","staticRef","searchText","useSelector","data","pageTitle","currentPageTitle","dispatch","useDispatch","onSearch","callback","wait","argsRef","timeout","cleanup","clearTimeout","args","setTimeout","useDebouncedCallback","key","document","fullscreenElement","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","elem","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","openFullscreen","staticElm","toggleStaticVisibility","Layout","props","children","Card","imgUrl","loaded","useState","delay","setDelay","imgRef","onError","loadFallbackImage","title","fetchMoreItems","memo","image","imgEl","style","background","color","marginRight","_page","fetchUtil","then","res","page","url","otherOptions","fetch","json","ListingPage","assets","setCurrentPage","searchKey","fetchMovieList","filterAndDispatchIfSearching","list","a","movies","total","newList","content","currentPage","_arr","filteredData","filterList","searchResults","_searchKey","filter","item","String","toLowerCase","includes","iterableItems","useMemo","dataLength","next","p","hasMore","scrollThreshold","scrollableTarget","height","overflow","map","i","initialState","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a5e606de.chunk.js","sourcesContent":["export const ASSETS_PREFIX = `${process.env.PUBLIC_URL}`;\nexport const FALLBACK_IMAGE = `${ASSETS_PREFIX}/slices/placeholder_for_missing_posters.png`;\nexport const API_ENDPOINT = `https://gist.githubusercontent.com/KrishnaSharmaCC/34b098f4e07af56c6e9ad2f88cb9454a/raw/a333b24f9d448d1de7a37fc5abd91996c837bf2d`;","export const ACTIONS = {\n  FEED_ITEMS: 'FEED_ITEMS',\n  SEARCH_RESULTS: 'SEARCH_RESULTS',\n  SEARCH: 'SEARCH'\n}","import React, { useEffect, useRef } from 'react';\nimport { ASSETS_PREFIX } from '../../constants';\nimport './searchBox.scss';\n\nconst SearchBox = ({ value, onChange, searchFocused }) => {\n  const searchInput = useRef(null);\n  const toggleInput = (el, state) => {\n    const ee = el?.current;\n    if (ee?.classList) {\n      if (state) {\n        ee.classList.add('show');\n        ee.focus(); // Focus input\n        searchFocused(true);\n      } else {\n        ee.classList.remove('show');\n        searchFocused(false);\n      }\n    }\n  };\n  const setSearchKeyFromProps = (value) => {\n    if (searchInput?.current) {\n      searchInput.current.value = value;\n      toggleInput(searchInput, true)\n\n    } ;\n  }\n  useEffect(() => {\n    value && setSearchKeyFromProps(value)\n  }, [value]);\n\n  const clearSearch = (el) => {\n    const ee = el?.current;\n    ee.value = '';\n    onChange('');\n    searchFocused(false);\n  };\n  return (\n    <div\n      className=\"search\"\n      onMouseLeave={() => {\n        // Do not trigger render.. use ref instead\n        !searchInput?.current?.value?.trim()?.length &&\n          toggleInput(searchInput, false);\n      }}\n    >\n      <div className=\"searchInputWrapper\">\n        <input\n          id=\"search\"\n          name=\"search\"\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"What're you looking for?\"\n          className=\"searchInput\"\n          onChange={(e) => onChange(e.target.value)}\n          ref={searchInput}\n        />\n        <img\n          className=\"search\"\n          src={`${ASSETS_PREFIX}/slices/search.png`}\n          alt=\"Search-icon\"\n          onClick={() => toggleInput(searchInput, true)}\n        />\n      </div>\n    </div>\n  );\n};\nexport default SearchBox;\n","import React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ASSETS_PREFIX } from '../../constants';\nimport { useDebouncedCallback } from '../../hooks/useDebounceCallback';\nimport { ACTIONS } from '../../redux/actions';\nimport SearchBox from '../searchBox/searchBox';\nimport './header.scss';\n\n/* View in fullscreen */\nfunction openFullscreen() {\n  const elem = document.documentElement;\n  if (elem.requestFullscreen) {\n    elem.requestFullscreen();\n  } else if (elem.mozRequestFullScreen) {\n    /* Firefox */\n    elem.mozRequestFullScreen();\n  } else if (elem.webkitRequestFullscreen) {\n    /* Chrome, Safari and Opera */\n    elem.webkitRequestFullscreen();\n  } else if (elem.msRequestFullscreen) {\n    /* IE/Edge */\n    elem.msRequestFullscreen();\n  }\n}\n\n/* Close fullscreen */\nfunction closeFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    /* Firefox */\n    document.mozCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    /* Chrome, Safari and Opera */\n    document.webkitExitFullscreen();\n  } else if (document.msExitFullscreen) {\n    /* IE/Edge */\n    document.msExitFullscreen();\n  }\n}\n\nconst Header = () => {\n  const staticRef = useRef(null); // arrow button and current page title\n  const searchText = useSelector(({ data }) => data.searchText);\n  const pageTitle = useSelector(({ data }) => data.currentPageTitle);\n  const dispatch = useDispatch();\n\n  // Toggle visibility of arrow button and current page title.\n  const toggleStaticVisibility = ({ current: staticElm }, state) => {\n    if (staticElm?.classList) {\n      if (state) {\n        staticElm.classList.add('hide');\n        return;\n      }\n      staticElm.classList.remove('hide');\n    }\n  };\n\n  // Add a debounce of 0.5s to let user type in. Then store the search key..\n  const onSearch = useDebouncedCallback((key) => {\n    dispatch({ type: ACTIONS.SEARCH, data: { searchText: key } });\n  }, 500);\n  return (\n    <div className=\"header\">\n      <div className=\"header-items\">\n        <div className=\"static\" ref={staticRef}>\n          <img\n            className=\"backButton\"\n            src={`${ASSETS_PREFIX}/slices/Back.png`}\n            alt=\"\"\n          />\n          <p\n            className=\"currentPageTitle\"\n            onClick={() =>\n              !document.fullscreenElement ? openFullscreen() : closeFullscreen()\n            }\n          >\n            {pageTitle}\n          </p>\n        </div>\n        <SearchBox\n          value={searchText}\n          onChange={onSearch}\n          searchFocused={(state) => toggleStaticVisibility(staticRef, state)}\n        />\n      </div>\n    </div>\n  );\n};\nexport default Header;\n","import { useEffect, useRef } from \"react\";\n\nexport function useDebouncedCallback(\n  callback,\n  wait\n) {\n  // track args & timeout handle between calls\n  const argsRef = useRef();\n  const timeout = useRef();\n\n  function cleanup() {\n    if(timeout.current) {\n      clearTimeout(timeout.current);\n    }\n  }\n\n  // make sure our timeout gets cleared if\n  // our consuming component gets unmounted\n  useEffect(() => cleanup, []);\n\n  return function debouncedCallback(\n    ...args\n  ) {\n    // capture latest args\n    argsRef.current = args;\n\n    // clear debounce timer\n    cleanup();\n\n    // start waiting again\n    timeout.current = setTimeout(() => {\n      if(argsRef.current) {\n        callback(...argsRef.current);\n      }\n    }, wait);\n  };\n}","import React from 'react';\nimport Header from '../../components/header/header';\nimport './layout.scss';\nconst Layout = (props) => {\n  return (\n  <div className=\"layout\">\n      <Header/>\n      <div className=\"layout-wrapper\">{props.children}</div>\n    </div>\n  );\n};\nexport default Layout;\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { FALLBACK_IMAGE } from '../../constants';\nimport './card.scss';\nconst Card = ({ imgUrl, name, loaded = true }) => {\n  const [delay, setDelay] = useState(loaded);\n  useEffect(() => {\n    setTimeout(() => {\n      setDelay(false)\n    }, 1500);\n  }, []);\n  \n  // Reference to the image element..\n  const imgRef = useRef(null);\n  const loadFallbackImage = (e) => {\n    const el = imgRef?.current;\n    if (el) {\n      el.src = FALLBACK_IMAGE;\n    }\n  }\n  return (\n    !delay ? <div className=\"playCard\">\n      <div className=\"playCardImageContainer\">\n        <img src={imgUrl} alt={name} className=\"playCardImage\" onError={(e) => loadFallbackImage(e)} ref={imgRef}/>\n      </div>\n      <p className=\"playCardName\" title={name}>{name}</p>\n     </div>\n        :\n    <div className=\"skelton\">\n      <div className=\"image pulse\"></div>\n      <div className=\"text pulse\"></div>\n    </div>\n    // <PreloadImage imgUrl={!delay && imgUrl} name={name}/>\n  );\n};\nexport default Card;\n\n\nconst PreloadImage = memo(({ imgUrl, name }) => {\n  const image = useRef(null);\n  useEffect(() => {\n    const imgEl = image?.current;\n    if (!imgUrl) {\n      imgEl.classList.add('loading');\n    } else {\n      imgEl.classList.remove('loading');\n      imgEl.style.background = `url(${imgUrl}) no-repeat center /cover`;\n    }\n  }, [imgUrl])\n  return (\n    <div className=\"skelton lines\">\n      <div className=\"image pulse\" ref={image}></div>\n      {!!!(name && imgUrl) ? <div className=\"text pulse\"></div> : <div style={{ color: 'white', marginRight: 'auto' }}>{name}</div>}\n    </div>\n  )\n});\n","import { API_ENDPOINT } from '../constants';\n\nexport const fetchMoreItems = (_page = 1) => {\n  // Could be replaced by a API endpoint..\n  return fetchUtil(`${API_ENDPOINT}/diagnal-list-${_page}.json`).then(res => res?.page);\n}\n\nconst fetchUtil = (url, otherOptions) => {\n  return fetch(url, otherOptions).then(res => res.json());\n}","import React, { useEffect, useMemo, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card from '../../components/card/card';\nimport { ASSETS_PREFIX } from '../../constants';\nimport { ACTIONS } from '../../redux/actions';\nimport { fetchMoreItems } from '../../utils/fetchUtil';\nimport './listingPage.scss';\n\nconst TOTAL_PAGES = 3; // This is the maximum page returned by the API endpoint..\n\nconst ListingPage = () => {\n  \n  const assets = useSelector(({ data }) => data?.['assets']);\n  const dispatch = useDispatch();\n  const [page, setCurrentPage] = useState(1);\n  const searchKey = useSelector(({ data }) => data?.searchText);\n\n  // Fetch the movies list for the first load..\n  useEffect(() => {\n    fetchMovieList(page);\n  }, []);\n\n  // Filter results for subsequent searches (whenever the search key changes)...\n  useEffect(() => {\n    if (searchKey) {\n      // If search key present, update redux state containing only search results from all the list..\n      filterAndDispatchIfSearching(assets?.list);\n    }\n  }, [searchKey]);\n\n  /**\n   * @description: Fetch movie lists using pages.\n   * @param _page: page number to be fetched.\n   * */\n  const fetchMovieList = async (_page) => {\n    const movies = await fetchMoreItems(_page);\n    const title = movies?.title;\n    // const page_size_request = movies?.['page-size-requested'];\n    // const page_size_rcvd = movies?.['page-size-returned'];\n    const total = movies?.['total-content-items'];\n    if (movies) {\n      const newList = movies?.['content-items']?.content;\n      if (searchKey) {\n        // If search key present, update redux state containing only search results..\n        filterAndDispatchIfSearching([...assets.list, ...newList]);\n      }\n      // Update redux state containing actual all the results..\n      dispatch({\n        type: ACTIONS.FEED_ITEMS,\n        data: {\n          currentPage: _page,\n          total: total,\n          list: newList,\n          currentPageTitle: title,\n        },\n      });\n    }\n  };\n\n  /**\n   * @description: Filter the results based on the search query and store into redux state..\n   * @param _arr: Actual array to be iterated on to find the results..\n   * */\n  const filterAndDispatchIfSearching = (_arr) => {\n    const filteredData = filterList(_arr, searchKey);\n    dispatch({\n      type: ACTIONS.SEARCH_RESULTS,\n      data: {\n        currentPage: page,\n        searchResults: filteredData,\n      },\n    });\n  };\n\n  /**\n   * @description: Filter the results based on the search query and return a new array..\n   * @param _arr: Actual array to be iterated on to find the results..\n   * @param _searchKey: Search key represented the search string\n   * */\n  const filterList = (_arr, _searchKey) => {\n    return _arr?.filter((item) =>\n      String(item.name).toLowerCase().includes(String(_searchKey).toLowerCase())\n    );\n  };\n\n  // Actual iterable to be rendered on to the UI.\n  const iterableItems = useMemo(() => {\n    /* Re-assigning iterable is an expensive op, so we do it only when the searchKey changes and not on every render. */\n    return assets?.[searchKey ? 'searchResults' : 'list'];\n  }, [assets?.searchResults, assets?.list, searchKey]);\n\n  return (\n    <div className=\"listingPage\">\n      {!!iterableItems?.length ? (\n        <InfiniteScroll\n          dataLength={iterableItems?.length}\n          next={() => {\n            if (page + 1 <= TOTAL_PAGES) {\n              setCurrentPage((p) => p + 1);\n              fetchMovieList(page + 1);\n            }\n          }}\n          // Will be true when search key is present so that user can keep\n          // scrolling for more data..\n          hasMore={searchKey ? true : +assets.total > assets.list.length}\n          scrollThreshold={0.6}\n          scrollableTarget=\"scrollable\"\n        >\n          <div\n            className=\"listings\"\n            id=\"scrollable\"\n            // Height is the total height - navbar/search bar height..\n            style={{ height: 'calc(100vh - 140px)', overflow: 'auto' }}\n          >\n            {iterableItems?.map((item, i) => (\n              <Card\n                imgUrl={`${ASSETS_PREFIX}/slices/${item['poster-image']}`}\n                name={item.name}\n                key={i}\n              />\n            ))}\n          </div>\n        </InfiniteScroll>\n      ) : searchKey && <h1 className=\"noResults\">No results found..</h1>}\n    </div>\n  );\n};\nexport default ListingPage;\n","import { combineReducers, createStore } from 'redux';\nimport { ACTIONS } from './actions';\nconst initialState = { searchText: '', currentPageTitle: '', assets: { currentPage: 1, total: 0, list: [], searchResults: [] } };\n\n\n\n// Could be split up into multiple reducers (for search and actual feed) if need be..\nconst data = (state = initialState, { type, data }) => {\n  switch (type) {\n    case ACTIONS.FEED_ITEMS:\n      return { ...state, currentPageTitle: data.currentPageTitle, assets: { ...state.assets, currentPage: data.currentPage, total: data.total, list: [...state.assets.list, ...data.list] } };\n    case ACTIONS.SEARCH_RESULTS:\n      return { ...state, assets: { ...state.assets, currentPage: data.currentPage, searchResults: [...data.searchResults] } }\n    case ACTIONS.SEARCH:\n      return { ...state, searchText: data.searchText }\n    default:\n      return state;\n  }\n}\n\n// Keeping only one reducer now for simplicity..\nconst rootReducer = combineReducers({ data });\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Layout from './containers/layout/layout';\nimport ListingPage from './containers/listingPage/listingPage';\nimport store from './redux/store';\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Layout> \n          <ListingPage />\n          </Layout>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}